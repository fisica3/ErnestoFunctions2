# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'EnlaceDedicadoTemporal2'

  # Function app name
  functionAppNameDev: 'devconsumption01'
  functionAppNameUat: 'demofunctions04'
  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/src/functionappinvsernesto'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release
        
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Test
  displayName: Test stage  
  jobs:  
  - job: Test
    displayName: Test
    condition: eq(variables.runTest, true)
    pool:
      vmImage: $(vmImageName)
    steps:          
    - task: DotNetCoreCLI@2
      displayName: Test      
      inputs:
        command: test
        projects: '**/Test/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" -- RunConfiguration.DisableAppDomain=true --settings **/coverlet.runsettings' 
        testRunTitle: EFCore2.Tests
    - script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.6.4'  
      displayName: 'Install ReportGenerator tool' 
    - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura" -assemblyfilters:-*.Views'  
      displayName: 'Create reports'
    - task: PublishCodeCoverageResults@1  
      displayName: 'Publish code coverage'  
      inputs:  
        codeCoverageTool: Cobertura  
        summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml' 

- stage: DeployDev
  displayName: Deploy DEV
  dependsOn: Test
  condition: succeeded()

  jobs:
  - deployment: JDeployDev
    displayName: Job Deploy Dev
    environment: 'development'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionApp'
              appName: '$(functionAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'zipDeploy'
          - script: echo "Hola Comunidad, este es un mensaje de prueba "
            displayName: 'Step Test Dev (msg)'    

